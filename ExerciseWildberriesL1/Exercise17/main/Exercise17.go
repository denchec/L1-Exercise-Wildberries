package main

import "fmt"

func main() {
	items := []int{1, 2, 9, 20, 31, 45, 63, 70, 100} // Создаем отсортированный массив
	/* Используем функцию binarySearch и отправляем в нее два значения: первое - искомое число, второе - массив
	в конечном итоге выводим true - если нашли в массиве искомое число, false - если не нашли*/
	fmt.Println(binarySearch(63, items))
}

func binarySearch(needle int, haystack []int) bool {

	low := 0                  // Создаем переменную с индексом минимального значения массива
	high := len(haystack) - 1 // Создаем переменную с индексом максимального значения массива

	/* Цикл for делает следующие действия:
	1) Высчитывает середину массива.
	2) Проверяет, если искомое число больше середины массива:
		2.1) Если больше - то мы присваиваем переменной low значение середины + 1, чтобы в следующий пробег цикла искать в половине,
	которая больше числа median.
		2.2) Если меньше - то мы присваиваем переменной high значение середины - 1, чтобы в следующий пробег цикла искать в половине,
	которая меньше числа median.*/
	for low <= high {
		median := (low + high) / 2

		if haystack[median] < needle {
			low = median + 1
		} else {
			high = median - 1
		}
	}

	// Если цикл for проверил весь массив, но не нашел искомого значения - возвращаем false
	if low == len(haystack) || haystack[low] != needle {
		return false
	}

	// Если цикл for нашел искомое значение - возвращаем true
	return true
}
